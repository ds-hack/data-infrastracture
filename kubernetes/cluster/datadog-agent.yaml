# k8sモニタリング・ログ監視用のDatadog Daemonsetリソースにより各ノードにPodを配置する
# https://docs.datadoghq.com/ja/agent/kubernetes/?tab=daemonset
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: datadog-agent
  namespace: default
spec:
  selector:
    matchLabels:
      app: datadog-agent
  template:
    metadata:
      labels:
        app: datadog-agent
      name: datadog-agent
    spec:
      serviceAccountName: datadog-agent
      containers:
      - image: datadog/agent:latest
        imagePullPolicy: Always
        name: datadog-agent
        ports:
          - containerPort: 8125
            ## DogStatsD 経由のカスタムメトリクス - このセクションのコメントを解除して、
            ## カスタムメトリクスコレクションを有効にします。
            ## DD_DOGSTATSD_NON_LOCAL_TRAFFIC を "true" に設定して、
            ## 他のコンテナから StatsD メトリクスを収集します。
            #
            # hostPort: 8125
            name: dogstatsdport
            protocol: UDP
          - containerPort: 8126
            ## トレース収集（APM）- このセクションのコメントを解除して、APM を有効にします
            # hostPort: 8126
            name: traceport
            protocol: TCP
        env:
          ## 組織に関連する Datadog API キーを設定します
          ## Kubernetes Secret を使用する場合、次の環境変数を使用します:
          - {name: DD_API_KEY, valueFrom: { secretKeyRef: { name: datadog-secret, key: api-key }}}

          ## DD_SITE を "datadoghq.eu" に設定して、Agent データを Datadog EU サイトに送信します
          - {name: DD_SITE, value: "datadoghq.com"}

          ## StatsD の収集を許可するには、DD_DOGSTATSD_NON_LOCAL_TRAFFIC を true に設定します。
          - {name: DD_DOGSTATSD_NON_LOCAL_TRAFFIC, value: "false" }
          - {name: KUBERNETES, value: "true"}
          - {name: DD_HEALTH_PORT, value: "5555"}
          - {name: DD_COLLECT_KUBERNETES_EVENTS, value: "true" }
          - {name: DD_LEADER_ELECTION, value: "true" }
          - {name: DD_APM_ENABLED, value: "true" }

          - name: DD_KUBERNETES_KUBELET_HOST
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP

          - {name: DD_CRI_SOCKET_PATH, value: /host/var/run/docker.sock}
          - {name: DOCKER_HOST, value: unix:///host/var/run/docker.sock}

        ## これらは、リクエストと制限の最小推奨値です。
        ## Agent が必要とするリソースの量は、以下によって異なります。
        ## * チェックの数
        ## * 有効なインテグレーションの数
        ## * 有効な機能の数
        resources:
          requests:
            memory: "256Mi"
            cpu: "200m"
          limits:
            memory: "256Mi"
            cpu: "200m"
        volumeMounts:
          - {name: dockersocketdir, mountPath: /host/var/run}
          - {name: procdir, mountPath: /host/proc, readOnly: true}
          - {name: cgroups, mountPath: /host/sys/fs/cgroup, readOnly: true}
          - {name: s6-run, mountPath: /var/run/s6}
          - {name: logpodpath, mountPath: /var/log/pods}
          ## Docker ランタイムディレクトリ、このパスをコンテナランタイムログディレクトリに
          ## 置き換えるか、`/var/log/pods` が他のディレクトリへのシンボリックリンクでない
          ## 場合、この構成を削除します。
          - {name: logcontainerpath, mountPath: /var/lib/docker/containers}
        livenessProbe:
          httpGet:
            path: /health
            port: 5555
          initialDelaySeconds: 15
          periodSeconds: 15
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 3
      volumes:
        - {name: dockersocketdir, hostPath: {path: /var/run}}
        - {name: procdir, hostPath: {path: /proc}}
        - {name: cgroups, hostPath: {path: /sys/fs/cgroup}}
        - {name: s6-run, emptyDir: {}}
        - {name: logpodpath, hostPath: {path: /var/log/pods}}
        ## Docker ランタイムディレクトリ、このパスをコンテナランタイムログディレクトリに
        ## 置き換えるか、`/var/log/pods` が他のディレクトリへのシンボリックリンクでない
        ## 場合、この構成を削除します。
        - {name: logcontainerpath, hostPath: {path: /var/lib/docker/containers}}